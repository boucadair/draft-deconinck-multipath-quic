---
title: Multipath Extension for QUIC
abbrev: MP-QUIC
docname: draft-deconinck-multipath-quic-01
date: today
category: std
updates:

ipr: trust200902
area: Transport
workgroup: QUIC Working Group
keyword: Internet-Draft

stand_alone: yes
pi: [toc, sortrefs, symrefs]

author:
 -
  ins: Q. De Coninck
  name: Quentin De Coninck
  organization: UCLouvain
  email: quentin.deconinck@uclouvain.be
 -
  ins: O. Bonaventure
  name: Olivier Bonaventure
  organization: UCLouvain
  email: Olivier.Bonaventure@uclouvain.be

normative:
  RFC2119:
  I-D.ietf-quic-transport:
  I-D.ietf-quic-tls:
  I-D.ietf-quic-recovery:
informative:
  RFC0793:
  RFC6356:
  RFC6824:
  RFC8041:
  Cellnet:
     title: "Exploring Mobile/WiFi Handover with Multipath TCP"
     date: "2012"
     seriesinfo: "ACM SIGCOMM workshop on Cellular Networks (Cellnet'12)"
     author:
     -
       ins: C. Paasch
     -
       ins: G. Detal
     -
       ins: F. Duchene
     -
       ins: C. Raiciu
     -
       ins: O. Bonaventure
  MPRTP:
     title: "MPRTP: Multipath considerations for real-time media"
     date: "2013"
     seriesinfo: "Proceedings of the 4th ACM Multimedia Systems Conference"
     author:
      -
        ins: V. Singh
        name:
        org: Aalto University
      -
        ins: S. Ahsan
        name: Saba Ahsan
        org: Aalto University
      -
        ins: J. Ott
        name: Jorg Ott
        org: Aalto University
  SCTPCMT:
     title: "Concurrent multipath transfer using SCTP multihoming over independent end-to-end paths"
     date: "2006"
     seriesinfo: "IEEE/ACM Transactions on networking, Vol. 14, no 5"
     author:
     -
       ins: J. Iyengar
     -
       ins: P. Amer
     -
       ins: R. Stewart
  OLIA:
    title: "MPTCP is not pareto-optimal: performance issues and a possible solution"
    date: "2012"
    seriesinfo: "Proceedings of the 8th international conference on Emerging networking experiments and technologies, ACM"
    author:
    -
      ins: R. Khalili
    -
      ins: N. Gast
    -
      ins: M. Popovic
    -
      ins: U. Upadhyay
    -
      ins: J.-Y. Le Boudec
  MPQUIC:
    title: "Multipath QUIC: Design and Evaluation"
    date: "Dec. 2017"
    seriesinfo: "13th International Conference on emerging Networking EXperiments and Technologies (CoNEXT 2017). http://multipath-quic.org"
    author:
    -   
       ins: Q. De Coninck
    -
       ins: O. Bonaventure
  IETFJ:
    title: "Multipath TCP Deployments"   
    date: "Nov. 2016"
    seriesinfo: "IETF Journal"
    author:
    -
        ins: O. Bonaventure
    -
        ins: S. Seo

--- abstract

Multipath TCP has shown how a reliable transport protocol can efficiently use
multiple paths for a given connection. We leverage the experience gained with
Multipath TCP to propose simple extensions that enable QUIC to efficiently
use multiple paths during the lifetime of a QUIC connection.

--- middle

Introduction
============

Endhosts have evolved. Today's endhosts are equipped with several network
interfaces and users expect to be able to seamlessly switch from one to
another or use them simultaneously to aggregate bandwidth. During the last
years, several multipath extensions to transport protocols have been
proposed {{RFC6824}},{{MPRTP}},{{SCTPCMT}}. Multipath TCP {{RFC6824}} is the most
mature one. It is already deployed on popular smartphones and for other
use cases {{RFC8041}}.

With regular TCP and UDP, all the packets that belong to a given flow contain
the same 5-tuple that acts as an identifier for this flow. This prevents flows from
using multiple paths. QUIC {{I-D.ietf-quic-transport}} does not use the 5-tuple as
an implicit connection identifier. A QUIC flow
is identified by its Connection ID. This enables flows to survive to
events such as NAT rebinding or mobility cases where the IP address or
the port of one of the communicating peer changes. This connection
migration feature is key for QUIC to migrate a flow from one path to
another. However, this path change is implicit and the current design {{I-D.ietf-quic-transport}}
still assumes single-path flows. Seamless handovers between wireless
networks on smartphones are one of the motivations for connection migration in
QUIC. However, experience with Multipath TCP shows that the
handover between different wireless networks is not an abrupt process
{{Cellnet}},{{IETFJ}} . To support
seamless handovers, it is important to be able to use two (or more) paths simultaneously
during the handover.

Bringing Multipath to QUIC allows hosts to aggregate several networks
while providing better handover support, and potentially opens new use
cases. A detailed performance evaluation and a comparison between
Multipath QUIC and Multipath TCP may be found in {{MPQUIC}}.

In this draft, we leverage many of the lessons learned from the design of Multipath TCP
and propose extensions to the current QUIC design to enable it to simultaneously
use several paths. This document is organized as follows. It first
provides an overview of the operation of Multipath QUIC. It then states
changes required in the packet format and specifies the usage of
multiple paths. It also defines new frames to perform multipath
operations. Finally, it provides some security and IANA considerations.


Conventions and Definitions
===========================

The words "MUST", "MUST NOT", "SHOULD", and "MAY" are used in this
document.  It's not shouting; when they are capitalized, they have
the special meaning defined in {{RFC2119}}.

We assume that the reader is familiar with the terminology used in
the QUIC documents {{I-D.ietf-quic-transport}}. In addition, we define:

- Path: A logical association between two hosts over which packets
  can be sent. A path is identified by a Path ID.

- Initial Path: The path used for the establishment of the QUIC connection.
  The cryptographic handshake is done on this path. It is identified
  by Path ID 0.


Notational Conventions
----------------------

Packet and frame diagrams use the format described in Section 2.1 of
{{I-D.ietf-quic-transport}}, with the following additional convention:

x (j) ... Indicates that x uses the variable-length encoding in
   {{variable-length-pid}}

Overview
========

The current design of QUIC {{I-D.ietf-quic-transport}} provides reliable transport
with multiplexing and security. A wide range of devices on today's
Internet are multihomed. Examples include smartphones equipped
with both WiFi and cellular interfaces, but also regular dual-stack
hosts that use both IPv4 and IPv6. Experience with Multipath TCP has
shown that the ability to combine different paths during the lifetime
of a connection provides various benefits including bandwidth
aggregation or seamless handovers {{RFC8041}},{{IETFJ}}.

The current design of QUIC does not enable multihomed devices to
efficiently use different paths. We first explain why
a multipath extension would be beneficial to QUIC and then
describe it at a high level.

What is a Path?
---------------

Before going into details, let's first define what is called a "path".
A path is a UDP flow between two hosts denoted by a 4-tuple
(IP source address, IP destination address, source port, destination port).
On a smartphone interacting with a single-homed server, the mobile
device could decide to use one path over the WiFi network and another
over the cellular one. Those paths are not necessarily
completely disjoint. For example, when interacting with a
dual-stack server, a smartphone may create two paths over the WiFi
network, one over IPv4 and the other one over IPv6.

Going Further than Connection Migration
---------------------------------------

Unlike TCP {{RFC0793}}, QUIC is not bound to a particular 4-tuple during
the lifetime of a connection. A QUIC connection is identified by a Connection ID,
placed in the public header of QUIC packets. This enables hosts to
continue the connection even if the 4-tuple changed due to, e.g., NAT
rebinding. This ability to shift a connection from one 4-tuple to
another is called Connection Migration. Another of its use cases is
fail-over when the address in use fails but
another one is available. A mobile device loosing the WiFi connectivity
can then continue the connection over its cellular interface.

A QUIC connection can thus start on a given path and end on another
one. However, the current QUIC design {{I-D.ietf-quic-transport}}
assumes that only one path is in use for a given connection. This connection
migration feature is not intended to support the simultaneous
usage of multiple paths. To illustrate this point,
consider the following scenario where a smartphone connected to both
WiFi and LTE networks sends a POST request fitting in 2
packets and receives a large response from the single-homed server.

~~~~~~~~~~
Server                        Phone                           Server
via WiFi                                                     via LTE                                  
-------                      -------                          -----
  |  Pkt(CID=A, PN=1, frames=[  |    
  |   STREAM("Request (1/2)")]) | Pkt(CID=A, PN=2, frames=[     |  
  |<----------------------------|  STREAM("Request (2/2)")])    |
  |  Pkt(CID=A, PN=1, frames=[  |--------                       |
  |   ACK(LargestAcked=1)])     |       |----------             |
  |---------------------------->|                 |----------   |
  |                             |                           |-->|
  |                             |   Pkt(CID=A, PN=2, frames=[   |
  |                             |    ACK(LargestAcked=2),       |
  |                             |    STREAM("Response 1")]) ----|
  |                             |                 ----------|   |
  |                             |       ----------|             |
  |                             |<------|                       |
  |                             |    Pkt(CID=A, PN=3, frames=[  |
  |                             |     ACK (LargestAcked=2)])    |
  |                             |--------                       |
  |                             |       |----------             |
  |                             |                 |----------   |
  |                             |                           |-->|
  |                             |  Pkt(CID=A, PN=3, frames=[    |
  |                             |   STREAM("Response 2")])      |
  |                             |                           ----|
  |                             |           ...   <---------|   |  

~~~~~~~~~~
{: #examplespquic title="Single-path QUIC with multiple paths"}

Assume the client wants to aggregate all the network interfaces it has.
It sends the first packet with the STREAM frame containing the
beginning of the request on the WiFi interface. It then sends the second one
on its LTE interface. If the WiFi network exhibits a lower latency than the LTE
one, the server will first receive the packet from the WiFi network
and acknowledge it by sending an ACK frame on the WiFi.
Then, it receives the second packet from the LTE network. Thanks to
the Connection ID (CID) in the public header of the QUIC
packet, the server detects that this packet belongs to the same
connection and performs a connection migration over this new 4-tuple.
At this point, the connection remains stuck on the cellular network, unless the
smartphone sends a new packet over the WiFi network. This is
because there is currently no way for the server to know that the
remote peer uses two different networks paths with potentially different
properties. The smartphone might have sent the first response ACK frame on
the WiFi to drift the connection towards the WiFi network, but the
server would lose its ability to use the cellular one, and would
possibly observe large RTT variance over the connection. The multipath
extension of QUIC aims to achieve an efficient usage of multiple paths
by making them explicit to peers.

With the proposed multipath extension to QUIC, the example presented in
{{examplespquic}} can become the one presented below.


~~~~~~~~~~
Server                          Phone                          Server
via WiFi                                                      via LTE                                  
-------                        -------                          -----
  | Pkt(CID=A,PN=1,frames=[       |                               |
  |  STREAM("Request (1/2)")])    | Pkt(CID=B,PN=1,frames=[       |
  |<------------------------------|  STREAM("Request (2/2)")])    |
  | Pkt(CID=A,PN=1,frames=[       |--------                       |
  |  ACK(PID=1,LargestAcked=1)])  |       |----------             |
  |------------------------------>|                 |----------   |
  | Pkt(CID=A,PN=2,frames=[       |                           |-->|
  |  STREAM("Response 1")])       | Pkt(CIA=A,PN=1,frames=[       |
  |------------------------------>|  ACK(PID=2,LargestAcked=1),   |
  |                               |  STREAM("Response 2")])   ----|
  | Pkt(CID=A,PN=2,frames=[       |                 ----------|   |
  |  ACK(PID=1, LargestAcked=2),  |       ----------|             |
  |  ACK(PID=2, LargestAcked=1)]) |<------|                       |
  |<------------------------------|                               |
  | Pkt(CID=A,PN=3,frames=[       | Pkt(CIA=A,PN=2,frames=[       |
  |  STREAM("Response 3")])       |  STREAM("Response 4")])       |
  |------------------------------>|                           ----|
  |                               |                 ----------|   |
  |            ...                |  ...  <---------|             |
~~~~~~~~~~
{: #examplempquic title="Dataflow with Multipath QUIC (explicit Path ID)"}

With the notion of multiple paths explicitly advertised, the server is
aware that multiple paths using different networks are present, and can
potentially be used simultaneously since it knows the 4-tuple to use
for each path. When the server receives the request that was carried
over two different paths, it can then use both of them to transfer back
the response to the client. The remaining of this section focuses on
giving a high-level view of the multipath operations in QUIC.

Starting a Multipath QUIC Connection
------------------------------------

Before using multiple paths, the QUIC connection must be established. A
Multipath QUIC connection always starts over an initial path where the
cryptographic handshake takes place over the dedicated stream with
Stream ID 0. The establishment is thus performed as in the current QUIC
design {{I-D.ietf-quic-transport}} {{I-D.ietf-quic-tls}}. The
negotiation of multipath is performed during the cryptographic
handshake with the max_path_id transport parameter, where both hosts
advertise how many paths they are willing to use. The number of paths
that can then be used over the connection once the handshake completes
is the minimum between both advertised values. The path on which the
cryptographic handshake and the path number negotiation are performed
is called the Initial Path and is identified by the Path ID 0.

Multipath QUIC Architecture
---------------------------

Once the connection is established, QUIC can start to use as many paths
as negotiated. A Multipath QUIC connection is composed of several
paths. Each path is associated with a different four-tuple and
identified by a Path ID, as shown in {{architectural}}.

~~~~~~~~~~
          +---------------------------------------------+
          |              Connection (MCID)              |
          |   +--------+ +--------+ ... +------------+  |
          |   | Path 0 | | Path 1 |     | Path N - 1 |  |
          |   | Tuple  | | Tuple' | ... |   Tuple"   |  |
          |   |  PCID  | |  PCID' |     |    PCID"   |  |
          |   |  PN    | |  PN'   |     |    PN"     |  |
          |   +--------+ +--------+ ... +------------+  |
          +---------------------------------------------+
~~~~~~~~~~
{: #architectural title="Architectural view of Multipath QUIC"}

A Multipath QUIC connection starts on the Initial Path, identified by
Path ID 0. In Multipath QUIC, there are two levels of Connection IDs.
The Master Connection ID (MCID) uniquely identifies the connection, as
with the current QUIC design. The Path Connection ID (PCID) is specific
to each path. Packets belonging to a given path share the same PCID
written in the Connection ID field of the public header. The PCID acts
as an implicit path identifier for packets. This makes the linkability
of different paths harder than having explicit signaling. The PCID of
the Initial path will typically be the MCID. This design simplifies the
detection of packet losses on a per-path basis and enables a receiver
to easily detect out-of-order packets on a given path. Hosts can also
collect network information about each path, such as round-trip-time
measurements and maintain a per-path congestion window.

Exchanging Data over Multiple Paths
-----------------------------------

A QUIC packet acts as a container for one of more frames. Multipath
QUIC uses the same STREAM frames as QUIC to carry data. A byte
offset is associated to the data payload. One of the key design
decision of (Multipath) QUIC is that frames are independent of the
packets carrying them. This implies that a frame transmitted over
one path could be retransmitted later on another path without any
change.

However, the path on which data is sent is a packet-level information.
This means a frame can be sent regardless of the path of the
packet carrying it. Furthermore, because the data offset is a
frame-level information, there is no need to define additional sequence
numbers to cope with reordering across paths, unlike Multipath TCP
{{RFC6824}} that uses a Data Sequence Number at MPTCP level.
Other flow control considerations like the stream receive window
advertised by the MAX_STREAM_DATA frame remain unchanged when there
are multiple paths.

However, Multipath QUIC might face reordering at packet-level when
using paths having different latencies. The presence of the Path
ID in the public header ensures that the packets sent over a given path
will contain monotonically increasing packet numbers. To ensure more
flexibility and potentially to reduce the ACK block section of the ACK
frame when aggregating bandwidth of paths exhibiting different network
characteristics, each path keeps its own monotonically increasing
Packet Number space. This potentially allows sending 2^32 * 2^62 packets
on a QUIC connection since each path (with a Path ID encoded on 4 bytes)
has its own packet number space.

The ACK frame is also modified to allow per-path packet
acknowledgments. This remains compliant with the design decision of the
independence between packets and frames while providing more
flexibility to hosts to decide on which path they want to send path
acknowledgments. Looking again at {{examplempquic}}, packets that were
sent over a given path (e.g., the response2 packet on path 2 with CID B)
can be acknowledged on another path (here, path 1 with CID A) to limit
the latency due to ACK transmissions on high-latency paths. Such
scheduling decision would not have been possible in Multipath TCP
{{RFC6824}} which must acknowledge data coming from a given path on the
same path.


Starting to Use Paths
---------------------

The cryptographic handshake determines how many paths, in addition to
the initial one, can be used. Once this handshake completes, hosts must
agree on the Path Connection IDs of the available paths. The server
sends NEW_CONNECTION_ID frames to propose PCID for a given Path ID.
Once the client receives and acknowledges the frame, it can start using
the new path by placing the PCID in the Connection ID field of the
packets. The server can start using a path once the corresponding
NEW_CONNECTION_ID have been acknowledged.

The number of paths that can be used over a connection is controlled by
the server and the NEW_CONNECTION_ID frames it sends. To limit the
latency of the path handshake, the server can send those frames just
after the 0-RTT handshake packet.

Multipath QUIC is fully symmetrical. Both the client and the server can
start using new paths once their corresponding PCID have been
negotiated. Although a path can be first used by any host, it might not
be practical for one of the peers to start using new paths. A possible
cause is when a server wants to initiate the usage of a new path to a
NAT'd client. The client would possibly not receive the packet, leading
to connectivity issues on that path. To detect such issues, the PATHS
frame provides a list of the currently active paths of the sending hosts
to the peer. A path is called active when a functional network 4-tuple
(on which either packets were sent or received on it or host received
acknowledgments for packets over that path) is assigned to it.
Furthermore, the PATHS frame indicates which 4-tuple the path is
currently using. It also contains some path status metrics such as the
round-trip-time estimated by the sending host over a given path in
order to provide a global view of the path performance.


Communicating New Addresses
---------------------------

When a multi-homed mobile device connects to a dual-stacked server on
its IPv4 address, it is aware of its local addresses (e.g., the WiFi
and the cellular ones) and the IPv4 remote address used to establish
connection. If the client wants to create new paths over IPv6,
it needs to learn the other addresses of the remote peer.

This is possible with the ADD_ADDRESS frames that are sent by a
Multipath QUIC host to advertise its current addresses. Each advertised
address has an Address ID given by the sending host. The addresses
assigned to a host can vary during the lifetime of a Multipath QUIC
connection. A new ADD_ADDRESS frame is transmitted when a host has a new
address. This ADD_ADDRESS frame is protected as other QUIC control
frames, which implies that it cannot be spoofed by attackers.


Path Migration
--------------

At a given time, a Multipath QUIC connection gathers a set of paths,
each denoted by a 4-tuple. The 4-tuple that is associated to
a path is not fixed. It may change during the lifetime of a
connection. Those changes can be caused by NAT rebindings
or handovers for example.

~~~~~~~~~~
                                                                 Host
                                                                 ----
UDP(sIP= 192.0.2.0, dIP=198.51.100.0, sport=S, dport=D, payload=   |
    QUICPkt(CID=A, PN=X))                                          |
        -------------------------------------------------------->  |
                                                                   |
UDP(sIP= 198.51.100.0, dIP=192.0.2.0, sport=D, dport=S, payload=   |
    QUICPkt(CID=A, PN=Y))                                          |
        <--------------------------------------------------------  |
                                                                   |
UDP(sIP= 203.0.113.0, dIP=198.51.100.0, sport=T, dport=D, payload= |
    QUICPkt(CID=A, PN=X+1))                                        |
        -------------------------------------------------------->  |
                                                                   |
UDP(sIP= 198.51.100.0, dIP=203.0.113.0, sport=D, dport=T, payload= |
    QUICPkt(CID=A, PN=Y+1))                                        |
        <--------------------------------------------------------  |
                                                                   |
~~~~~~~~~~
{: #path_migration title="Example of path migration (explicit Path ID)"}

{{path_migration}} shows an example of path whose 4-tuple changes
during the connection. Initially, from the host perspective, the path
is using the 4-tuple (198.51.100.0, 192.0.2.0, D, S). The first packet
it receives still uses it and the host uses that 4-tuple to generate
the next packet on that path. Then, host receives a packet on the path
with a different 4-tuple (198.51.100.0, 203.0.113.0, D, T), with both
changed remote IP and port. Because the QUIC packet contains both the
Connection ID and the Path ID it belongs to, host can simply adapt the
path 4-tuple to the one of the last packet received, and next packets
on the path will use that 4-tuple. Because the Connection ID is its
only identifier, a path is not bound to a particular 4-tuple, and can
shift to another one. Multipath QUIC thus integrates the Connection
Migration ability at path level, providing the Path Migration ability.


Coping with Address Removals
----------------------------

During the life of the QUIC connection, an host might lose some of its
addresses. A concrete example is a smartphone going out of
reachability of a WiFi network or shutting off one of its network
interfaces. Such address removals are advertised by REMOVE_ADDRESS
frames. Those frames contain the Address ID of the lost address.

Thanks to this frame, an host can stop using a path whose 4-tuple
contains the removed address. However, if a NAT'd client losses its
private address and advertises this event, the sever will not know to
which public address this advertisement is intended and might still use
paths using that particular address. The PATHS frame helps the server
to perform the mapping between both addresses. It contains for each
active path the local Address ID used by the sending host. With both
the PATHS and the REMOVE_ADDRESS frames, the server can identify which
paths will be affected by the address removal to stop their usage
before being migrated to another 4-tuple.


Congestion Control
------------------

The QUIC congestion control scheme is defined in {{I-D.ietf-quic-recovery}}.
This congestion control scheme is not suitable when several paths are
active. Using the congestion control scheme defined in {{I-D.ietf-quic-recovery}}
with Multipath QUIC would result in unfairness. Each path of a Multipath QUIC
connection MUST have its own congestion window. The windows of the different
paths MUST be coupled together. Multipath TCP uses the LIA congestion control
scheme specified in {{RFC6356}}. This scheme can immediately be adapted to
Multipath QUIC. Other coupled congestion control schemes have been
proposed for Multipath TCP such as {{OLIA}}.


Mapping Path ID to Connection ID
================================

As described in the overview section, hosts need to identify on which
path packets are sent. The Path ID must then be inferred from the
public header. This is done by using Path Connection ID in addition to
the connection Master Connection ID.

The Master Connection ID is determined during the cryptographic
handshake and actually corresponds to the current Connection ID in the
current QUIC design {{I-D.ietf-quic-transport}}. The Path Connection ID
of the Initial path (with Path ID 0) is equal to the Master Connection
ID. The Path Connection ID of the other paths are determined by the
NEW_CONNECTION_ID frames exchanged.

The server MUST ensure that the advertised Path Connection ID is
available for the whole connection lifetime. Once it sends a
NEW_CONNECTION_ID frame containing the PCID, the server can start
receiving packets with the advertised Connection ID as belonging to the
corresponding path. The server MUST wait for the reception of the frame
acknowledgment before starting to send packets on that path.

Upon reception of the NEW_CONNECTION_ID frame, the client MUST
acknowledge it and MUST keep track of the link between the advertised
Path Connection ID and Path ID. It can then start using the advertised
path.

[TODO: PCID advertised by server already taken by the client]


Using Multiple Paths
====================

Multipath Negotiation
---------------------

The Multipath Negotiation takes place during the cryptographic
handshake with the max_path_id transport parameter. A QUIC connection
is initially single-path in QUIC, and all packets prior to handshake
completion MUST be exchanged over the Initial Path. During this
process, hosts advertise the maximum path ID they are willing to use.
The maximum path ID that can be used over the connection is the minimum
between both advertised values. A connection can then use any path with
a Path ID comprised between 0 and the negotiated maximum path ID
inclusive. If one of the host does not provides the max_path_id
transport parameter during the cryptographic handshake, the remote MUST
assume a value of 0, leading to a single-path connection over the
Initial Path. NEW_CONNECTION_ID frames proposing a Path ID greater than
the negotiated maximum value MUST trigger a CONNECTION_CLOSE frame
describing this issue.


### Transport Parameter Definition {#tp-definition}

An endhost MAY use the following transport parameter:

max_path_id (0x0020):

 :  The maximum path ID transport parameter indicates
    the number of paths in addition to the Initial Path that the host
    is willing to use over the connection, encoded as an unsigned 32-bit
    integer. This indicates that received packets with path ID larger
    than this limit will be dropped. The default value for this
    parameter is 0, meaning that an host omitting this transport
    parameter does not want to use multiple paths over the connection.


Variable-Length Encoding of the Path ID {#variable-length-pid}
---------------------------------------

From the negotiated maximum path ID, hosts can infer the amount of bits
required to encode the Path ID. If the maximum path ID is 255, only one
byte suffices. Similarly, if one of the hosts wants a single-path
connection, either by advertising a max_path_id of 0 or by omitting it,
the Path ID field should not be present.

| Negotiated Max Path ID Range | Path ID Field Length (Bytes) |
|:-----------------------------|:-----------------------------|
| 0                            | 0                            |
| 1-255                        | 1                            |
| 256-65535                    | 2                            |
| 65536-4294967295             | 4                            |
{: #vle-pid-table title="Summary of Path ID Encodings"}

The proposed encoding is summarized in {{vle-pid-table}}.

Because of security considerations described in {{nonce-considerations}},
an host reusing Packet Number across paths must limit the number of
advertised paths depending on the size of the Initial Value. In
particular, an host MUST NOT advertise a max_path_id whose field length
exceeds (Initial Value Length) - 8.


Path State
----------

A path is associated to a UDP flow over which packets can be sent or received.
The following state is maintained for a given path.

    o Path ID: this 4-byte number uniquely identifies a path in a
      connection. This value is immutable.
    o Path Connection ID: this 8-byte number makes the link between the
      packet's Connection ID field and the path.
    o Packet Number Space: each path is associated with own monotonically
      increasing packet number space. Each endpoint maintains a separate
      packet number for sending and receiving. Packet number
      considerations described in {{I-D.ietf-quic-transport}} apply
      within a given path.
    o Current 4-tuple: the tuple (sIP, dIP, sport, dport) used by the
      path to send or receive packets. This value is mutable and can also
      be empty when the path is not in use. If this value is set, the
      path is considered as active. The tuple can change either because
      the host decides to change its local address and/or port, or
      because it receives a packet with a different remote address and/or
      port than currently recorded. To cope with possible packet
      reordering within a given path, the remote address and port
      recorded by the host MUST match the one of the received packet with
      the largest Packet Number. The Initial Path MUST remain active at
      any time of the connection.
    o Current (local Address ID, remote Address ID) tuple: those
      identifiers come from the ADD_ADDRESS sent (local) and received
      (remote). This enables host to detect a path as unusable when,
      e.g., the remote Address ID is declared as lost by a
      REMOVE_ADDRESS. The addresses on which the connection was
      established have Address ID 0. The reception of PATHS frames
      helps hosts to perform the matching between the remote Address ID
      and the path.
    o Performance metrics: basic statistics such as round-trip-time or
      number of packets sent and received can be collected on a per-path
      basis. This information can be useful when an host needs to perform
      packet scheduling decisions and flow control management.


Modifications to QUIC frames
============================

The multipath extension allows hosts to send packets over multiple
paths. Since nearly all QUIC frames are independent of packets, no
change is required. The only exceptions are the NEW_CONNECTION_ID and
the ACK frames. The NEW_CONNECTION_ID is modified to provide Path
Connection ID negotiation for each path. The ACK frame contains
packet-level information with the Largest Acknowledged field. Since the
Packet Number are now linked to paths, the ACK frame must contain the
Path ID it acknowledges.

NEW_CONNECTION_ID Frame
-----------------------

The NEW_CONNECTION_ID frame (type=0x0b) as defined by {{I-D.ietf-quic-transport}}
keeps its ability to provide the client with alternative connection IDs
that can be used to break linkability when migrating connections. It
also allows the server to indicate which connection IDs the client must
use to take advantage of multiple paths.

The NEW_CONNECTION_ID is as follows:

~~~~~~~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          Path ID  (j)                       ...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          Sequence (i)                       ...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
+                        Connection ID (64)                     +
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
+                                                               +
|                                                               |
+                   Stateless Reset Token (128)                 +
|                                                               |
+                                                               +
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
~~~~~~~~~~
{: #newconnectionid title="NEW_CONNECTION_ID adapted to Multipath QUIC"}

Compared to the frame specified in {{I-D.ietf-quic-transport}}, a Path
ID field of variable size is prefixed to make the link between the Path
ID and the Connection ID. This frame can be only sent by the server.
Upon reception of the frame with a specified path ID, the client can
start using the new path with the matching Connection ID.

An host MUST NOT start using a path if no related NEW_CONNECTION_ID
frame have been received (at client side) or acknowledged (at server
side). To allow multipath usage upon handshake completion, the server
SHOULD send NEW_CONNECTION_ID frames for all paths it allows using as
soon the connection establishment completes.

To cope with privacy issues, it should be hard to make the link between
two different connections or two different paths of a same connection
by just looking at the Connection ID contained in packets. Therefore,
Connection IDs chosen by the server for multiple paths of a same
connection MUST be generated in a random fashion.

It might happen that server proposes a Connection ID in a
NEW_CONNECTION_ID frame that is already in use by the client for
another connection with another server. In such cases, the client MUST
warn the server this Connection ID is not available to ask for another
Connection ID. This request for asking another Connection ID for a
particular path will follow the same mechanism as described in
{{I-D.ietf-quic-transport}}.


ACK Frame
---------

The format of the modified ACK frame is shown below.

~~~~~~~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                           Path ID (j)                       ...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                    Largest Acknowledged (i)                 ...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          ACK Delay (i)                      ...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                       ACK Block Count (i)                   ...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          ACK Blocks (*)                     ...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
~~~~~~~~~~
{: #ack_frame title="ACK Frame adapted to Multipath"}

Compared to the ACK frame in the current QUIC design
{{I-D.ietf-quic-transport}}, the ACK frame contains a variable size
Path ID field indicating to which path the acknowledged PSNs relate to.

Since frames are independent of packets, and the path notion relates to
the packets, the ACK frames can be sent on any path, unlike Multipath
TCP {{RFC6824}} which is constrained to send ACKs on the same path. The
impact of such a strategy on the latency estimation has to be explored
further.

New Frames
==========

To support the multipath operations, new frames have been defined to
coordinate hosts. This draft uses a type field containing 0x20 to
indicate that the frame is related to multipath operations.

ADD_ADDRESS Frame
-----------------

The ADD_ADDRESS frame is used by a host to advertise its currently
reachable addresses. The proposed type for the ADDRESS frame is 0x20.
An ADD_ADDRESS frame is shown below.

~~~~~~~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0|0|0|P|IPVers.|Address ID (8) |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                       IP Address (32/128)                   ...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|          [Port (16)]          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
~~~~~~~~~~
{: #add_address_frame title="ADD_ADDRESS Frame"}

The ADD_ADDRESS frame contains the following fields:

    o Reserved bits: the three most-significant bits of the first byte
      are set to 0, and are reserved for future use.

    o P bit: the fourth most-significant bit of the first byte indicates,
      if set, the presence of the Port field.

    o IPVers.: the remaining four least-significant bits of the first
      byte contains the version of the IP address contained in the IP
      Address field.

    o Address ID: an unique identifier for the advertised address for
      tracking and removal purposes. This is needed when, e.g., a NAT
      changes the IP address such that both hosts see different IP
      addresses for a same path endpoint.

    o IP Address: the advertised IP address, in network order.

    o Port: this optional field indicates the port number related to the
      advertised IP address. When this field is present, it indicates
      that a path can use the 2-tuple (IP addr, port).


Upon reception of an ADD_ADDRESS frame, the receiver can use the
communicated address to start the usage of a new path. Therefore, an
ADD_ADDRESS frame SHOULD contain a global reachable address. Private
and link-local addresses SHOULD NOT be exchanged.

REMOVE_ADDRESS Frame
--------------------

The REMOVE_ADDRESS frame is used by a host to signal that a previously
announced address was lost. The proposed type for the REMOVE_ADDRESS
frame is 0x21. A REMOVE_ADDRESS frame is shown below.

~~~~~~~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+
|Address ID (8) |
+-+-+-+-+-+-+-+-+
~~~~~~~~~~
{: #remove_address_frame title="REMOVE_ADDRESS Frame"}

The frame contains only one field, Address ID, being the identifier of
the address to remove. A host SHOULD stop using paths using the removed
address until they have been migrated to another available address. If
the REMOVE_ADDRESS contains an Address ID that was not previously
announced, the receiver MUST ignore the frame.


PATHS Frame
-----------

The PATHS frame communicates the paths state of the sending host
to the peer. It allows the sender to communicate its active paths to
the peer in order to detect potential connectivity issue over paths.
Its proposed type is 0x22. The format of the PATHS frame is shown
below.

~~~~~~~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                        ActivePaths (j)                      ...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                     Path Info Section (*)                   ...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
~~~~~~~~~~
{: #paths_frame title="PATHS Frame"}

The PATHS frame contains the following fields:

    o ActivePaths: the current number of paths considered as active
      sender point of view, excluding the Initial Path. ActivePaths MUST
      be lower or equal to the maximum Path ID negotiated.

    o Path Info Section: contains information about all the active paths
      (i.e., there are ActivePaths + 1 entries). The format of this
      section is shown below.

~~~~~~~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                         Path ID 0 (j)                       ...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|LocAddrID 0 (8)|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                        RTT Path 0 (32)                        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                               ...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                         Path ID N (j)                       ...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|LocAddrID N (8)|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                        RTT Path N (32)                        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
~~~~~~~~~~
{: #path_info_section title="Path Info Section"}

The fields in the Path Info Section are:

    o Path ID: the Path ID of the active path the sending host provides
      information about.

    o LocAddrID: the local Address ID of the address currently used by
      the path. It can be used by a peer to indicate that it migrates
      one of the path to another address.

    o RTT Path: the RTT experienced by the sending host over the path
      with the provided Path ID. The formatting is similar to the one
      used for the ACK delay field in the ACK frame.

The Path Info section currently contains the RTT of the sending host,
but this section can be extended to provide additional information in
order to get a global picture of the connection at both ends.


Security Considerations
=======================

Nonce Computation {#nonce-considerations}
-----------------

With Multipath QUIC, each path has its own packet number space. With
the current nonce computation {{I-D.ietf-quic-tls}}, using twice the same packet
number over two different paths leads to the same cryptographic nonce.
Depending on the size of the Initial Value (and hence the nonce), there
are two ways to mitigate this issue.

If the Initial Value has a length of 8 bytes, then a packet number used
on a given path MUST NOT be reused on another path of the connection,
and therefore at most 2^64 packets can be sent on a QUIC connection.
This means there will be packet number skipping at path level, but the
packet number will remain monotonically increasing on each path.

If the Initial Value has a length of 9 or more, then the cryptographic
nonce computation is now performed as follow. The nonce, N, is formed
by combining the packet protection IV (either client_pp_iv_n or
server_pp_iv_n) with the Path ID and the packet number. The 64 bits of
the reconstructed QUIC packet number in network byte order is
left-padded with zeros to the size of the IV. The Path ID encoded in
its variable-length format described in {{variable-length-pid}} is
right-padded with zeros to the size of the IV. The Path IV is computed
as the exclusive OR of the padded Path ID and the IV. The exclusive OR
of the padded packet number and the Path IV forms the AEAD nonce.

IANA Considerations
===================

QUIC Transport Parameter Registry
---------------------------------

This document defines a new transport parameter for the negotiation of
multiple paths. The following entry in {{iana-tp-table}} should be
added to the "QUIC Transport Parameters" registry under the "QUIC
Protocol" heading.

| Value  | Parameter Name | Specification     |
|:-------|:---------------|:------------------|
| 0x0020 | max_path_id    | {{tp-definition}} |
{: #iana-tp-table title="Addition to QUIC Transport Parameters Entries"}


--- back

Change Log
==========

Since draft-deconinck-multipath-quic-00
-------------------------------

- Implicit Path ID notification using Connection ID and
  NEW_CONNECTION_ID frames
- Variable-length encoding for Path ID
- Updated text to match draft-ietf-quic-transport-08
- Fixed various typos
